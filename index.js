//cd C:\Users\danil\CascadeProjects\telegram-shop
require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const sellerUsername = process.env.SELLER_USERNAME;

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const carts = new Map();

// –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
const catalog = {
    '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': [
        { id: 1, name: '–°–º–∞—Ä—Ç—Ñ–æ–Ω', price: 2000, description: 'Pocox3Pro' },
        { id: 2, name: '–ù–æ—É—Ç–±—É–∫', price: 49999, description: 'MacPro' }
    ],
    '–û–¥–µ–∂–¥–∞': [
        { id: 3, name: '–§—É—Ç–±–æ–ª–∫–∞', price: 999, description: '–•–ª–æ–ø–∫–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ "–ü–µ—Ä–≤—ã–µ"' },
        { id: 4, name: '–î–∂–∏–Ω—Å—ã', price: 2999, description: '–î–∂–∏–Ω—Å—ã Calvin Klein' }
    ]
};

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['üõç –ö–∞—Ç–∞–ª–æ–≥', 'üõí –ö–æ—Ä–∑–∏–Ω–∞'],
            ['‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ', 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º']
        ],
        resize_keyboard: true
    }
};

// –ö–æ–º–∞–Ω–¥–∞ start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! üëã\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é:',
        mainKeyboard
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    switch(text) {
        case 'üõç –ö–∞—Ç–∞–ª–æ–≥':
            showCategories(chatId);
            break;
        case 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
            showCart(chatId);
            break;
        case '‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ':
            bot.sendMessage(chatId, 
                '–°–∞–º—ã–π –ª—É—á—à–∏–π –∏ –±—Ä–µ–Ω–¥–æ–≤—ã–π —Ç–æ–≤–∞—Ä!üì¶.\n' +
                '–°–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—èüöÄ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞üöö!\n'+
                '–†–∞–±–æ—Ç–∞–µ–º —Ä–∞–¥–∏ –≤–∞—Å 24/7‚ù§Ô∏è!'
            );
            break;
        case 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º':
            bot.sendMessage(chatId, 
                `–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @${sellerUsername}`
            );
            break;
    }
});

// –ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function showCategories(chatId) {
    const categories = Object.keys(catalog);
    const keyboard = {
        inline_keyboard: categories.map(category => ([
            { text: category, callback_data: `category_${category}` }
        ]))
    };
    
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
        reply_markup: keyboard
    });
}

// –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function showProducts(chatId, category) {
    const products = catalog[category];
    products.forEach(product => {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: `–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É (${product.price}‚ÇΩ)`, 
                      callback_data: `add_${product.id}` }
                ]
            ]
        };
        
        bot.sendMessage(chatId, 
            `*${product.name}*\n` +
            `–¶–µ–Ω–∞: ${product.price}‚ÇΩ\n` +
            `–û–ø–∏—Å–∞–Ω–∏–µ: ${product.description}`,
            {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            }
        );
    });
}

// –ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã
function showCart(chatId) {
    const cart = carts.get(chatId) || [];
    
    if (cart.length === 0) {
        bot.sendMessage(chatId, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üõí');
        return;
    }

    const total = cart.reduce((sum, item) => sum + item.price, 0);
    const cartList = cart.map((item, index) => 
        `${index + 1}. ${item.name} - ${item.price}‚ÇΩ`
    ).join('\n');
    
    const keyboard = {
        inline_keyboard: [
            [{ text: 'üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'clear_cart' }],
            [{ text: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'checkout' }]
        ]
    };

    bot.sendMessage(chatId, 
        `üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n${cartList}\n\n` +
        `*–ò—Ç–æ–≥–æ: ${total}‚ÇΩ*`,
        {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        }
    );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith('category_')) {
        const category = data.split('_')[1];
        showProducts(chatId, category);
    }
    else if (data.startsWith('add_')) {
        const productId = parseInt(data.split('_')[1]);
        let product = null;
        
        // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ id
        for (const category of Object.values(catalog)) {
            const found = category.find(p => p.id === productId);
            if (found) {
                product = found;
                break;
            }
        }

        if (product) {
            if (!carts.has(chatId)) {
                carts.set(chatId, []);
            }
            carts.get(chatId).push(product);
            
            await bot.answerCallbackQuery(query.id, {
                text: '‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É'
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
            const cart = carts.get(chatId);
            const total = cart.reduce((sum, item) => sum + item.price, 0);
            bot.sendMessage(chatId, 
                `–¢–æ–≤–∞—Ä "${product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É\n` +
                `–°—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã: ${total}‚ÇΩ`,
                {
                    reply_markup: {
                        inline_keyboard: [[
                            { text: 'üõí –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'show_cart' }
                        ]]
                    }
                }
            );
        }
    }
    else if (data === 'show_cart') {
        showCart(chatId);
    }
    else if (data === 'clear_cart') {
        carts.delete(chatId);
        await bot.answerCallbackQuery(query.id, {
            text: 'üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞'
        });
        bot.sendMessage(chatId, '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞');
    }
    else if (data === 'checkout') {
        const cart = carts.get(chatId);
        if (cart && cart.length > 0) {
            const total = cart.reduce((sum, item) => sum + item.price, 0);
            const cartList = cart.map(item => 
                `${item.name} - ${item.price}‚ÇΩ`
            ).join('\n');

            // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
            const orderId = Date.now().toString(36) + Math.random().toString(36).substr(2);
            
            bot.sendMessage(chatId,
                `‚úÖ *–ó–∞–∫–∞–∑ ${orderId} –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n\n` +
                `*–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n${cartList}\n\n` +
                `*–ò—Ç–æ–≥–æ: ${total}‚ÇΩ*\n\n` +
                '–°–µ–π—á–∞—Å –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –∫ –ø—Ä–æ–¥–∞–≤—Ü—É.',
                {
                    parse_mode: 'Markdown'
                }
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
            bot.sendMessage(chatId,
                `—ç—Ç–æ —É—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã.:\n` +
                `https://t.me/${sellerUsername}?start=order_${orderId}`,
                {
                    disable_web_page_preview: true
                }
            );

            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            carts.delete(chatId);
        }
    }
 
    await bot.answerCallbackQuery(query.id);
});